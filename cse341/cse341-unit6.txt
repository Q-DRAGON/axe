Unit 6 结构，实现语言，静态类型和动态类型

106. 章节介绍
在 ML 中，我们定义 datatype 并且写递归函数，在动态语言 Racket 中，我们用 list 和 struct。
如何用一种语言写另一种语言的解释器。
对比动态和静态语言。

107. 没有数据类型的数据类型编程
在 ML 中，我们使用数据类型绑定来定义我们自己的一种类型。数据绑定将一个新的类型引入到了静态环境中，同时也引入了创建这个数据类型的构造函数和使用这个类型数据的模式匹配。
Racket 作为一种动态类型的语言，没有直接对应的数据类型绑定，但它支持相同的数据定义和编程。
在一些情况下， Racket 比 ML 对数据类型的操作更简单，因为我们可以使用动态类型把任何种类的数据放在任何地方。
    其关键原因就是 Racket 有了 null?, number?, 和 string? 进行类型判断。
对于 ML 中递归的数据类型呢？在 Racket 中有两种方法解决，第二种更好，但是第一种有利于理解 Racket。
    方法一：改变对算数表达式数据类型的判断。
        首先，返回的不再是 i 等，而是 exp。比如返回数字变成返回 Const i。
        其次，通过 Racket Lists 完成数据类型递归。
            在 Racket 中，动态类型允许我们使用列表来表示任何类型的数据。
            一个足够的习惯用法是使用第一个列表元素来表示“它是什么”，然后使用后面的列表元素来保存底层数据。

108. 方法二：利用 Racket 的 Structs 的数据类型编程
Struct 的定义：
(struct foo (bar baz quux) #:transparent)
使用：
foo?
foo-bar
foo-baz
foo-quux
#:transparent 属性：模块外可见
#:mutable 属性：决定是否可变。结合函数如 set-foo-bar!, set-foo-baz!, 和 set-foo-quux!

109. Structs 的优势
Structs 不是 lists 的语法糖。区别在于，s 创建了一种新的值的类型。
第二种方法更优越，因为它能更快地捕获错误。同时也可以隐藏部分定义。

110. 实施编程语言
语言实现的典型工作流：
    首先，我们使用一个字符串来表示该语言中程序的具体语法。
    解析器就会生成一个表示程序的树。这被称为抽象语法树，或者简称为AST。
    将AST传递给实现的其余部分。
实现某种编程语言B的剩余实现方法基本上有两种：
    首先，我们可以用另一种语言 A 编写解释器，它接受 B 中的程序并生成答案。（A 就是元语言 metalanguage。）
    其次，我们可以用另一种语言编写一个编译器，它接受 B 语言中的程序，然后用其他语言 C 生成等价的程序，然后使用 C 的一些预先存在的实现。
现代系统经常把各个方面结合起来，使用多层次的解释和编译：
    典型的 Java 系统将 Java 源代码编译成可移植的中间格式。然后， Java “虚拟机”可以开始用这种格式解释代码，但是通过将代码进一步编译成可以直接在硬件上执行的代码，可以获得更好的性能。
在计算机科学中，一个更为恼人和普遍的误解是有“编译语言”(如 C )和“解释语言”(如 Racket)。
    这简直是一派胡言：我可以为 C 编写解释器，也可以为 Racket 编写编译器。
用一个语言实现另一个语言：
    之前实现的 eval-exp 函数是一个小编程语言的解释器。
    这里说的语言就是基于构造元素如常量、否定、加法和乘法表达式建立起来的表达式。
    eval-exp是一个解释器，因为它是一个函数，它接受我们语言中的表达式，并根据语言的语义规则在我们的语言中生成值。
    Racket 只是元语言，用来写解释器的“其它语言”。

111. 你的解释器可以做什么不能做什么
虽然将一种语言嵌入到另一种语言中与具有特殊语法相比似乎不太方便。
但它除了不需要编写语法分析器（parser)之外还有其他优点。
比如可以利用元语言在接收奇怪的数据后可以报错并中断程序，而不是继续计算。

112. 实现变量和环境
我们实现的小语言的解释器需要一个递归辅助函数，它接受一个表达式和一个环境并产生一个值。
环境的表示也是元语言的一部分。

113. 实现闭包
要实现具有函数闭包和词法作用域的语言，我们的解释器需要“记住”定义函数时“当前”的环境，以便在调用函数时能够使用这个环境而不是调用者的环境。
方法：创建一个称为闭包的小数据结构，它包括环境和函数本身。这一对(闭包)是解释函数的结果。

114. 闭包是否高效?
将“整个当前环境”存储在每个闭包中似乎代价高昂。
    首先，当环境是关联列表时，成本并不高，因为不同的环境只是彼此的扩展。
    其次，在实践中，我们可以通过只存储功能体可能使用的环境部分来节省空间。
如果目标语言本身没有闭包，编译器如何实现闭包：
    我们更改程序中的所有函数，以接受一个额外的参数(环境)，并更改所有函数调用，以显式地传递这个额外的参数。

115. Racket 作为解释语言的“宏”功能
在实现解释器或编译器时，必须将正在实现的语言中的内容与用于实现的语言中的内容(元语言)分开。
但是，由于我们正在编写 Racket 的待评估程序，我们可以使用 Racket 助手函数来帮助我们创建这些程序。这样做基本上就是使用 Racket 函数作为宏语言来定义语言的宏。

116. ML 和 Racket
Racket 可以被看成是 ML，只不过被包装在了一个大数据类型里。
datatype theType = Int of int
                 | String of string
                 | Pair of theType * theType
                 | Fun of theType -> theType
                 | ... (* one constructor per built-in type *)
但是，Racket 的 struct 定义做了一件事，您无法通过 ML 数据类型绑定完成：
    它们动态地向数据类型添加新的构造函数。

117. 什么是静态检查?
通常所说的“静态检查”是指在程序(成功)解析之后，但在它运行之前，为了拒绝它所做的任何事情。
    静态检查的错误(通常是“类型错误”)包括未定义变量或使用数字而不是数字对等内容。
    它是“编译时检查”，尽管它与语言实现在静态检查成功后是否使用编译器或解释器无关。
执行的静态检查是编程语言定义的一部分。不同的语言可以做不同的事情。
定义语言的静态检查最常用的方法是通过类型系统。
    例如，ML 类型系统的一个目的是防止将字符串传递给像除法运算符这样的算术基元。相反，Racket 使用“动态检查”。通过标记每个值并让除法运算符检查其参数是否为数字。ML 实现不必为此目的标记值，因为它可以依赖于静态检查。

118. 正确性: 可靠性、完整性、不可判定性
健全可以防止假阴性，完备可以防止假阳性。
    “假阴性”和“假阳性”这两个词来自统计学和医学:
        假设有一种疾病的医学测试，但它不是一个完美的测试。如果测试没有检测到疾病，但患者确实患有疾病，那么这是假阴性(测试为阴性，但那是假的)。
        如果测试检测到疾病，但患者实际上没有患病，那么这是假阳性(测试是阳性，但那是假的)。
在现代语言中，类型系统是健全的(它们阻止了它们所声称的)，但并不完整(它们拒绝了它们不需要拒绝的程序)。
    可靠性非常重要，完整性差一些，迫不得已时可以被放弃。

119. 弱类型
现在假设某个类型系统对某个属性 X 不安全，那么为了安全起见，语言实现仍然应该(至少在某些情况下)执行动态检查以防止 X 发生，并且语言定义应该允许这些检查在运行时失败。
如果一种语言中合法的实现导致了程序报错，我们称这种语言为弱类型。
有错的程序被更多的限制的语言叫做强类型。
Racket 是动态类型的，但仍然是强类型的。
C 和 C++ 是弱类型语言。这样设计是因为设计人员不希望语言定义强制实现执行所有必要的动态检查。因为执行检查不仅花费时间，更要保留额外的数据。作为低级语言，程序员可以期望额外的“隐藏字段”没有添加。

120-121. 静态和动态类型
我们知道静态类型可以及早捕捉到许多错误，可靠性保证了某些类型的错误不会继续存在，不完整意味着一些完美的程序会被拒绝。具体通过以下几个话题讨论：
静态类型或动态类型更方便吗?
    动态类型更方便的论点来自于能够混合和匹配不同类型的数据，比如数字、字符串和对，而不必声明新的类型定义或带有模式匹配的“混乱”代码。
    另一方面，静态类型使得假设数据具有某种类型更加方便，因为它知道这种假设不能被违背，这将不会导致以后出现错误。而动态语言为了达到这个目的需要插入显式的动态检查，这样做需要更多的工作，也更难阅读。
静态类型是否阻止了有用的程序?
    支持静态类型的一个更简单的论点是，现代类型系统表达能力很强，很少会妨碍你。
静态类型的提早错误检测重要吗?
    支持静态类型的一个明确论点是，一旦静态地检查代码，它就会更早地捕获错误。
    一个支持动态类型的人可能会说，静态检查通常只会捕获测试中可能捕获的 bug。因为你仍然需要测试您的程序，所以在运行测试之前捕获一些 bug 的额外价值就会降低。
静态类型或动态类型会带来更好的性能吗?
    静态类型可以导致更快的代码，因为它不需要在运行时执行类型测试。实际上，很多性能优势可能源于不首先存储类型标记。在 ML 中，只有程序员使用数据类型构造函数的地方才有运行时标记，而不是到处都有。
    动态类型有三个合理的反对理由。首先，这种低级别的性能在大多数软件中并不重要。其次，动态类型语言的实现可以而且确实尝试优化它所能识别的类型测试是不必要的。第三，如果静态类型语言的程序员必须绕过类型系统的限制，那么这些变通方法可能会削弱假定的性能优势。
静态类型或动态类型是否使代码复用更容易?
    动态类型可能会使重用库函数更容易。另一方面，这可以掩盖bug。
静态类型或动态类型更适合原型开发吗?
    动态类型通常被认为更适合于原型设计，因为当你正在开发一个原型，通常在同一时间，您正在改变您对软件将做什么以及将如何实现它的看法，当这些决策在变化时，您不需要花费精力来定义变量、函数和数据结构的类型。
    此外，您可能知道程序的一部分还没有意义(它不会在静态类型语言中进行类型检查)，但是您仍然希望运行程序的其余部分(例如，测试刚刚编写的部分)。
    静态类型支持者可能会反驳说，在软件设计中记录类型永远都不会太早，即使(可能是特别在)它们不清楚和变化的情况下。
静态类型或动态类型更适合于代码进化吗?
    动态类型有时更便于代码的演进，因为我们可以将代码更改为更宽容的(接受更多类型的参数)，而不必更改代码中已有的任何客户。
    另一方面，静态类型检查在改进代码以捕获改进所引入的 bug 时非常有用。

122. eval 和 quote

(define (make-some-code y)
   (if y
       (list ’begin (list ’print "hi") (list ’+ 4 2))
       (list ’+ 5 3)))
(define (f x)
    (eval (make-some-code x)))
eval 接受这样的表达式，并在运行时对其求值。
基于编译器的语言实现(注意我们没有说“编译语言”)能处理 eval 吗？是的，它需要在运行时有编译器或解释器，因为它不能预先知道传递给 eval 的是什么。
在 Racket 中，有一种特殊的引用形式，它把下面的所有东西都当作符号、数字、列表等，而不是要调用的函数。
(define (make-some-code y)
  (if y
      (quote (begin (print "hi") (+ 4 2)))
      (quote (+ 5 3))))
有趣的是，eval 和 quote 是反向的。
